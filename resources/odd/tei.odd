<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xmlns:ex="http://www.tei-c.org/ns/Examples" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>TEI</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="guidelines.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2021-02-01+01:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="tei" ns="" source="teipublisher.odd"> <elementSpec ident="gi" mode="add">
                    <model behaviour="link">
            <param name="uri" value="'ref/' || ."/>
            <param name="target" value="'_blank'"/>
        </model>
                </elementSpec>
                <elementSpec ident="ptr" mode="change">
                    <model predicate="starts-with(@target, '#')" behaviour="inline" cssClass="inner-ref">
            <param name="div" value="let $div := id(substring-after(@target, '#'), root($parameters?root))  let $pr := count($div/preceding-sibling::div) + 1  let $p1 := $div/parent::div let $an1 := $div/parent::div/preceding-sibling::div let $a1 := if ($p1) then count($an1) + 1 else ()  let $p2 := $p1/parent::div let $an2 := $p1/parent::div/preceding-sibling::div  let $a2 := if ($p2) then count($an2) + 1 else ()  let $p3 := $p2/parent::div let $an3 := $p2/parent::div/preceding-sibling::div let $a3 := if ($p3) then count($an3) + 1 else ()  let $p4 := $p3/parent::div let $an4 := $p3/parent::div/preceding-sibling::div let $a4 := if ($p3) then count($an4) + 1 else () return  string-join(($a3, $a2, $a1, $pr), '.')"/>
            <param name="id" value="substring-after(@target, '#')"/>
            <param name="label" value="id(substring-after(@target, '#'), root($parameters?root))/head[1]/string()"/>
            <param name="space" value="' '"/>
            <pb:template xmlns="" xml:space="preserve"><pb-link xml-id="[[id]]" emit="transcription">[[div]] [[space]] [[label]]</pb-link></pb:template>
        </model>
                    <model predicate="starts-with(@target, '#')" behaviour="inline">
            <param name="id" value="substring-after(@target, '#')"/>
            <param name="label" value="id(substring-after(@target, '#'), root($parameters?root))/head[1]/string()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-link xml-id="[[id]]">[[label]]</pb-link></pb:template>
        </model>
                    <model predicate="@target and string(.)=''" behaviour="inline">
            <param name="target" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[target]]">[[target]]</a></pb:template>
        </model>
                    <model predicate="parent::notatedMusic" behaviour="webcomponent">
            <param name="name" value="'pb-mei'"/>
            <param name="url" value="@target"/>
        </model>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="$parameters?mode='breadcrumbs'" behaviour="inline">
            <param name="uri" value="parent::div/@xml:id"/>
            <param name="label" value="."/>
            <param name="div" value="let $div := ./parent::div  let $pr := count($div/preceding-sibling::div) + 1  let $p1 := $div/parent::div let $an1 := $div/parent::div/preceding-sibling::div let $a1 := if ($p1) then count($an1) + 1 else ()  let $p2 := $p1/parent::div let $an2 := $p1/parent::div/preceding-sibling::div  let $a2 := if ($p2) then count($an2) + 1 else ()  let $p3 := $p2/parent::div let $an3 := $p2/parent::div/preceding-sibling::div let $a3 := if ($p3) then count($an3) + 1 else ()  let $p4 := $p3/parent::div let $an4 := $p3/parent::div/preceding-sibling::div let $a4 := if ($p3) then count($an4) + 1 else () return  string-join(($a3, $a2, $a1, $pr), '.')"/>
            <param name="space" value="' '"/>
            <pb:template xmlns="" xml:space="preserve"><pb-link xml-id="[[uri]]" emit="transcription">[[div]] [[space]] [[label]]</pb-link></pb:template>
        </model>
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
            <param name="content" value="let $div := parent::div  let $pr := count($div/preceding-sibling::div) + 1  let $p1 := $div/parent::div let $an1 := $div/parent::div/preceding-sibling::div let $a1 := if ($p1) then count($an1) + 1 else ()  let $p2 := $p1/parent::div let $an2 := $p1/parent::div/preceding-sibling::div  let $a2 := if ($p2) then count($an2) + 1 else ()  let $p3 := $p2/parent::div let $an3 := $p2/parent::div/preceding-sibling::div let $a3 := if ($p3) then count($an3) + 1 else ()  let $p4 := $p3/parent::div let $an4 := $p3/parent::div/preceding-sibling::div let $a4 := if ($p3) then count($an4) + 1 else ()  let $number := string-join(($a3, $a2, $a1, $pr), '.')  return ($number, ' ', .)"/>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="specDesc" mode="add">
                    <model predicate="@key" behaviour="listItem" cssClass="specDesc">
            <param name="key" value="@key"/>
            <param name="description" value="let $key := @key  let $target := root($parameters?root)/descendant-or-self::elementSpec[@ident=$key]  return  $target/desc[@xml:lang=$parameters?language]"/>
            <pb:template xmlns="" xml:space="preserve"><span>
  <span class="element">&lt;<a href="ref/[[key]]">[[key]]</a>&gt; </span>
  <span>[[description]]</span>
</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="specList" mode="add">
                    <model behaviour="list" cssClass="specList">
            <outputRendition xml:space="preserve">
            list-style: none;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="ex:egXML" mode="add">
                    <modelSequence>
            <model behaviour="block">
                <param name="content" value="node()"/>
                <pb:template xmlns="" xml:space="preserve"><pb-code-highlight language="xml" theme="coy">
  <template>
    [[content]]
  </template>
</pb-code-highlight></pb:template>
            </model>
            <model predicate="not(@source = ('#NONE', '#UND'))" behaviour="alternate" cssClass="bibl-link">
                <param name="default" value="'bibliography'"/>
                <param name="alternate" value="let $key := substring-after(@source, '#') return root($parameters?root)//id($key)"/>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="specGrp" mode="add">
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="eg" mode="add">
                    <model behaviour="inline">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><pb-code-highlight>
  <template>
    [[content]]
  </template>
</pb-code-highlight></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="mentioned" mode="add">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="desc" mode="change">
                    <model predicate="@xml:lang != $parameters?language" behaviour="omit"/>
                    <model behaviour="inline"/>
                </elementSpec>
            <elementSpec ident="div" mode="change">
                    <modelSequence predicate="$parameters?mode='breadcrumbs'">
            <model behaviour="link" cssClass="breadcrumb">
                <param name="content" value="$get(.)/root(.)//titleStmt/title"/>
                <param name="uri" value="util:document-name(.)"/>
            </model>
            <model predicate="$get(.)/ancestor::div/head" behaviour="inline" cssClass="breadcrumb">
                <param name="content" value="$get(.)/ancestor::div/head"/>
            </model>
            <model behaviour="inline" cssClass="breadcrumb">
                <param name="content" value="let $div := .  let $pr := count($div/preceding-sibling::div) + 1  let $p1 := $div/parent::div let $an1 := $div/parent::div/preceding-sibling::div let $a1 := if ($p1) then count($an1) + 1 else ()  let $p2 := $p1/parent::div let $an2 := $p1/parent::div/preceding-sibling::div  let $a2 := if ($p2) then count($an2) + 1 else ()  let $p3 := $p2/parent::div let $an3 := $p2/parent::div/preceding-sibling::div let $a3 := if ($p3) then count($an3) + 1 else ()  let $p4 := $p3/parent::div let $an4 := $p3/parent::div/preceding-sibling::div let $a4 := if ($p3) then count($an4) + 1 else () let $number:=  string-join(($a3, $a2, $a1, $pr), '.')  return ($number, ' ', ./head/node())"/>
            </model>
        </modelSequence>
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>