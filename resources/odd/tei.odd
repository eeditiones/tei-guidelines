<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xmlns:ex="http://www.tei-c.org/ns/Examples" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>TEI</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="guidelines.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2021-02-01+01:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="tei" ns="" source="teipublisher.odd"> <elementSpec ident="gi" mode="add">
                    <model behaviour="link">
            <param name="uri" value="'ref/' || ."/>
            <param name="target" value="'_blank'"/>
        </model>
                </elementSpec>
                <elementSpec ident="ptr" mode="change">
                    <model predicate="starts-with(@target, '#')" behaviour="inline" cssClass="inner-ref">
            <param name="div" value="let $div := id(substring-after(@target, '#'), root($parameters?root))  let $pr := count($div/preceding-sibling::div) + 1  let $p1 := $div/parent::div let $an1 := $div/parent::div/preceding-sibling::div let $a1 := if ($p1) then count($an1) + 1 else ()  let $p2 := $p1/parent::div let $an2 := $p1/parent::div/preceding-sibling::div  let $a2 := if ($p2) then count($an2) + 1 else ()  let $p3 := $p2/parent::div let $an3 := $p2/parent::div/preceding-sibling::div let $a3 := if ($p3) then count($an3) + 1 else ()  let $p4 := $p3/parent::div let $an4 := $p3/parent::div/preceding-sibling::div let $a4 := if ($p3) then count($an4) + 1 else () return  string-join(($a3, $a2, $a1, $pr), '.')"/>
            <param name="id" value="substring-after(@target, '#')"/>
            <param name="label" value="id(substring-after(@target, '#'), root($parameters?root))/head[1]/string()"/>
            <param name="space" value="' '"/>
            <pb:template xmlns="" xml:space="preserve"><pb-link xml-id="[[id]]" emit="transcription">[[div]] [[space]] [[label]]</pb-link></pb:template>
        </model>
                    <model predicate="@target and string(.)=''" behaviour="inline">
            <param name="target" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[target]]">[[target]]</a></pb:template>
        </model>
                    <model predicate="parent::notatedMusic" behaviour="webcomponent">
            <param name="name" value="'pb-mei'"/>
            <param name="url" value="@target"/>
        </model>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="$parameters?mode='breadcrumbs'" behaviour="inline">
            <param name="uri" value="parent::div/@xml:id"/>
            <param name="label" value="."/>
            <param name="div" value="let $div := $get(.)/parent::div  let $pr := count($div/preceding-sibling::div) + 1  let $p1 := $div/parent::div let $an1 := $div/parent::div/preceding-sibling::div let $a1 := if ($p1) then count($an1) + 1 else ()  let $p2 := $p1/parent::div let $an2 := $p1/parent::div/preceding-sibling::div  let $a2 := if ($p2) then count($an2) + 1 else ()  let $p3 := $p2/parent::div let $an3 := $p2/parent::div/preceding-sibling::div let $a3 := if ($p3) then count($an3) + 1 else ()  let $p4 := $p3/parent::div let $an4 := $p3/parent::div/preceding-sibling::div let $a4 := if ($p3) then count($an4) + 1 else () return  string-join(($a3, $a2, $a1, $pr), '.')"/>
            <param name="space" value="' '"/>
            <pb:template xmlns="" xml:space="preserve"><pb-link xml-id="[[uri]]" emit="transcription">[[div]] [[space]] [[label]]</pb-link></pb:template>
        </model>
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
            <param name="content" value="let $div := $get(.)/parent::div  let $pr := 1 + count($div/preceding-sibling::div)  let $p1 := $div/parent::div let $an1 := $div/parent::div/preceding-sibling::div let $a1 := if ($p1) then count($an1) + 1 else ()  let $p2 := $p1/parent::div let $an2 := $p1/parent::div/preceding-sibling::div  let $a2 := if ($p2) then count($an2) + 1 else ()  let $p3 := $p2/parent::div let $an3 := $p2/parent::div/preceding-sibling::div let $a3 := if ($p3) then count($an3) + 1 else ()  let $p4 := $p3/parent::div let $an4 := $p3/parent::div/preceding-sibling::div let $a4 := if ($p3) then count($an4) + 1 else ()  let $number := string-join(($a3, $a2, $a1, $pr), '.')  return ($number, ' ', .)"/>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="specDesc" mode="add">
                    <model predicate="@key" behaviour="listItem" cssClass="specDesc">
            <param name="key" value="@key"/>
            <param name="description" value="let $key := @key   let $target :=  if (starts-with($key, 'att')) then  (:attribute class:)  root($parameters?root)//classSpec[@ident=$key]  else if (starts-with($key, 'model')) then  (:model class:)  root($parameters?root)//modelSpec[@ident=$key]  else   (: element class :)  root($parameters?root)//elementSpec[@ident=$key]        return  $target/desc[@xml:lang=$parameters?lng]"/>
            <param name="atts" value="let $key := @key let $atts := @atts return   if (starts-with($key, 'att')) then      for $att in tokenize($atts)        return root($parameters?root)//classSpec[@ident=$key]//attDef[@ident=$att]    else        ()"/>
            <pb:template xmlns="" xml:space="preserve"><span>
  <span class="element">&lt;<a href="ref/[[key]]">[[key]]</a>&gt; </span>
  <span>[[description]]</span>
  [[atts]]
</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="specList" mode="add">
                    <model behaviour="list" cssClass="specList">
            <outputRendition xml:space="preserve">
            list-style: none;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="ex:egXML" mode="add">
                    <modelSequence>
            <model behaviour="block" cssClass="example">
                <param name="content" value="."/>
                <pb:template xmlns="" xml:space="preserve"><pb-code-highlight language="xml" theme="solarizedlight">
  <template>
    [[content]]
  </template>
</pb-code-highlight></pb:template>
            </model>
            <model predicate="not(@source = ('#NONE', '#UND'))" behaviour="alternate" cssClass="bibl-link">
                <param name="default" value="'bibliography'"/>
                <param name="alternate" value="let $key := substring-after(@source, '#') return root($parameters?root)//id($key)/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="specGrp" mode="add">
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="eg" mode="add">
                    <model behaviour="block" cssClass="example">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><pb-code-highlight theme="solarizedlight">
  <template>
    [[content]]
  </template>
</pb-code-highlight></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="mentioned" mode="add">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="desc" mode="change">
                    <model predicate="@xml:lang != $parameters?lng" behaviour="omit"/>
                    <model behaviour="inline"/>
                </elementSpec>
            <elementSpec ident="div" mode="change">
                    <modelSequence predicate="$parameters?mode='breadcrumbs'">
            <model predicate="$get(.)/ancestor::div/head" behaviour="inline" cssClass="breadcrumb">
                <param name="content" value="$get(.)/ancestor::div/head"/>
            </model>
            <model behaviour="inline" cssClass="breadcrumb">
                <param name="content" value="let $div := $get(.)  let $pr := count($div/preceding-sibling::div) + 1  let $p1 := $div/parent::div let $an1 := $div/parent::div/preceding-sibling::div let $a1 := if ($p1) then count($an1) + 1 else ()  let $p2 := $p1/parent::div let $an2 := $p1/parent::div/preceding-sibling::div  let $a2 := if ($p2) then count($an2) + 1 else ()  let $p3 := $p2/parent::div let $an3 := $p2/parent::div/preceding-sibling::div let $a3 := if ($p3) then count($an3) + 1 else ()  let $p4 := $p3/parent::div let $an4 := $p3/parent::div/preceding-sibling::div let $a4 := if ($p3) then count($an4) + 1 else () let $number:=  string-join(($a3, $a2, $a1, $pr), '.')  return ($number, ' ', ./head/node())"/>
            </model>
        </modelSequence>
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
            <elementSpec ident="elementSpec" mode="add">
                    <model predicate="$parameters?spec='element'" behaviour="block">
            <param name="ident" value="@ident"/>
            <param name="gloss" value="gloss[@xml:lang=$parameters?lng]"/>
            <param name="lng" value="'en'"/>
            <param name="desc" value="desc[@xml:lang=$parameters?lng]"/>
            <param name="heading" value="@ident"/>
            <param name="content" value="content"/>
            <param name="members" value="for $i in classes/memberOf[not(starts-with(@key, 'att'))] let $n := $i/@key order by $n return $i"/>
            <param name="module" value="@module"/>
            <param name="attributes" value="attList"/>
            <param name="example" value="exemplum[@xml:lang=$parameters?lng]"/>
            <param name="attClass" value="for $i in classes/memberOf[starts-with(@key, 'att')] let $n := $i/@key order by $n return $i"/>
            <param name="links" value="if (listRef/ptr) then (' [', listRef/ptr, ']') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><div class="element-spec">
  <h3>[[ident]]</h3>
  <table>
    <tr><td colspan="2"><b>[[gloss]]</b> [[desc]] [[links]]</td></tr>
    <tr><td>Module</td><td>[[module]]</td></tr>
    <tr><td>Attributes</td><td><div>[[attClass]] [[attributes]]</div></td></tr>
    <tr><td>Member of</td><td>[[members]]</td></tr>
    <tr><td>Contained by</td><td>TODO</td></tr>
    <tr><td>May contain</td><td>TODO</td></tr>
    <tr><td>Example</td><td>[[example]]</td></tr>
    <tr><td>Content model</td><td>TOFIX [[content]]</td></tr>
    <tr><td>Schema declaration</td><td>TODO</td></tr>
</table>
</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="content" mode="add">
                    <model predicate="$parameters?mode='ref'" behaviour="block">
            <param name="content" value="serialize(.,                     &lt;output:serialization-parameters xmlns:output=&#34;http://www.w3.org/2010/xslt-xquery-serialization&#34;&gt;                       &lt;output:indent&gt;yes&lt;/output:indent&gt;                     &lt;/output:serialization-parameters&gt;)"/>
            <pb:template xmlns="" xml:space="preserve"><pb-code-highlight language="xml" theme="solarizedlight">
  <template>
    [[content]]
  </template>
</pb-code-highlight></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="memberOf" mode="add">
                    <model predicate="$parameters?mode='ref'" behaviour="link">
            <param name="uri" value="'ref/'||@key"/>
            <param name="content" value="@key"/>
        </model>
                </elementSpec>
                <elementSpec ident="attDef" mode="add">
                    <model predicate="$parameters?mode='ref'" behaviour="block">
            <desc>display in reference pages</desc>
            <param name="name" value="@ident"/>
            <param name="desc" value="desc[@xml:lang=$parameters?lng]"/>
            <param name="usage" value="@usage"/>
            <param name="datatype" value="datatype/dataRef/@key"/>
            <pb:template xmlns="" xml:space="preserve"><tr><td><dl><dt>@[[name]]</dt> <dd>[[desc]]</dd></dl></td></tr>
<tr><td><dl><dt>Usage</dt> <dd>[[usage]]</dd></dl>
  <dl><dt>Datatype</dt> <dd>[[datatype]]</dd></dl></td></tr></pb:template>
        </model>
                    <model behaviour="block" cssClass="attribute">
            <desc>display in the Guidelines text</desc>
            <param name="name" value="@ident"/>
            <param name="desc" value="desc[@xml:lang=$parameters?lng]"/>
            <pb:template xmlns="" xml:space="preserve"><dl><dt>@[[name]]</dt> <dd>[[desc]]</dd></dl></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="ident" mode="add">
                    <model predicate="@type=('class', 'module', 'macro', 'schema')" behaviour="inline">
            <param name="name" value="."/>
            <pb:template xmlns="" xml:space="preserve"><a href="ref/[[name]]">[[name]]</a></pb:template>
        </model>
                    <model predicate="@type" behaviour="inline">
            <desc>other types: ge, file, datatype, pe, ns, frag, rng</desc>
        </model>
                    <model behaviour="inline" cssClass="ident"/>
                </elementSpec>
            <elementSpec ident="teiHeader" mode="change">
                    <model predicate="$parameters?mode='title'" behaviour="block" cssClass="title">
            <desc>display as document title for Guidelines reading view</desc>
            <param name="title" value=".//titleStmt/title"/>
            <param name="version" value=".//editionStmt/edition"/>
            <pb:template xmlns="" xml:space="preserve"><div>
  <h2>[[title]]</h2>
  [[version]]
</div></pb:template>
        </model>
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>
                <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="edition" mode="change">
                    <model behaviour="inline"/>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>