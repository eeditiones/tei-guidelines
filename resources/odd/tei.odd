<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xmlns:ex="http://www.tei-c.org/ns/Examples" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>TEI</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="guidelines.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2021-02-01+01:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="tei" ns="" source="teipublisher.odd"> <elementSpec ident="gi" mode="add">
                    <model behaviour="link">
            <param name="uri" value="'ref/' || ."/>
            <param name="target" value="'_blank'"/>
        </model>
                </elementSpec>
                <elementSpec ident="ptr" mode="change">
                    <modelSequence predicate="$parameters?mode='ref'">
            <model behaviour="passthrough">
                <param name="div" value="let $div := id(substring-after(@target, '#'), root($parameters?root))    return ec:heading-number($div)"/>
                <param name="id" value="substring-after(@target, '#')"/>
                <param name="label" value="id(substring-after(@target, '#'), root($parameters?root))/head[1]/string()"/>
                <param name="space" value="' '"/>
                <pb:template xmlns="" xml:space="preserve"><a href="p5.xml?id=[[id]]" class="inner-ref">[[div]] [[space]] [[label]]</a></pb:template>
            </model>
        </modelSequence>
                    <modelSequence predicate="starts-with(@target, '#')">
            <model predicate="@type = 'cit'" behaviour="inline" cssClass="inner-ref">
                <param name="id" value="substring-after(@target, '#')"/>
                <param name="label" value="id(substring-after(@target, '#'), root($parameters?root))"/>
                <pb:template xmlns="" xml:space="preserve"><pb-link xml-id="[[id]]" emit="transcription">[[label]]</pb-link></pb:template>
            </model>
            <model behaviour="passthrough">
                <param name="div" value="let $div := id(substring-after(@target, '#'), root($parameters?root))  return ec:heading-number($div)"/>
                <param name="id" value="substring-after(@target, '#')"/>
                <param name="label" value="id(substring-after(@target, '#'), root($parameters?root))/head[1]/string()"/>
                <param name="space" value="' '"/>
                <pb:template xmlns="" xml:space="preserve"><pb-link class="inner-ref" xml-id="[[id]]" hash="[[id]]" emit="transcription">[[div]] [[space]] [[label]]</pb-link></pb:template>
            </model>
        </modelSequence>
                    <model predicate="@target and string(.)=''" behaviour="inline">
            <param name="target" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[target]]">[[target]]</a></pb:template>
        </model>
                    <model predicate="parent::notatedMusic" behaviour="webcomponent">
            <param name="name" value="'pb-mei'"/>
            <param name="url" value="@target"/>
        </model>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="$parameters?mode='guide'" behaviour="listItem">
            <param name="id" value="../@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><pb-link hash="[[id]]" emit="transcription">[[content]]</pb-link></pb:template>
        </model>
                    <model predicate="$parameters?mode='breadcrumbs'" behaviour="inline">
            <param name="uri" value="parent::div/@xml:id"/>
            <param name="label" value="."/>
            <param name="div" value="let $div := $get(.)/parent::div   return ec:heading-number($div)"/>
            <param name="space" value="' '"/>
            <pb:template xmlns="" xml:space="preserve"><pb-link xml-id="[[uri]]" emit="transcription">[[div]] [[space]] [[label]]</pb-link></pb:template>
        </model>
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <modelSequence predicate="parent::div">
            <model predicate="&lt;a name=&#34;#[[id]]&#34;/&gt;" behaviour="passthrough">
                <param name="id" value="parent::div/@xml:id"/>
                <param name="content" value="()"/>
            </model>
            <model behaviour="heading">
                <param name="level" value="count(ancestor::div)"/>
                <param name="content" value="let $div := $get(.)/parent::div   return (ec:heading-number($div),' ', .)"/>
            </model>
        </modelSequence>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="specDesc" mode="add">
                    <model predicate="@key" behaviour="listItem" cssClass="specDesc">
            <param name="key" value="@key"/>
            <param name="description" value="let $key := @key   let $target :=  if (starts-with($key, 'att')) then  (:attribute class:)  root($parameters?root)//classSpec[@ident=$key]  else if (starts-with($key, 'model')) then  (:model class:)  root($parameters?root)//modelSpec[@ident=$key]  else   (: element class :)  root($parameters?root)//elementSpec[@ident=$key]        return  $target/desc[@xml:lang=$parameters?lng]"/>
            <param name="atts" value="let $key := @key let $atts := @atts return   if (starts-with($key, 'att')) then      for $att in tokenize($atts)        return root($parameters?root)//classSpec[@ident=$key]//attDef[@ident=$att]    else        ()"/>
            <pb:template xmlns="" xml:space="preserve"><span>
  <span class="element">&lt;<a href="ref/[[key]]">[[key]]</a>&gt; </span>
  <span>[[description]]</span>
  [[atts]]
</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="specList" mode="add">
                    <model behaviour="list" cssClass="specList">
            <outputRendition xml:space="preserve">
            list-style: none;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="ex:egXML" mode="add">
                    <modelSequence>
            <model behaviour="block">
                <param name="ser" value="replace(serialize(node(), map {&#34;indent&#34;: false()}), ' xmlns=&#34;http://www.tei-c.org/ns/Examples&#34;', '')"/>
                <pb:template xmlns="" xml:space="preserve"><pb-code-highlight language="xml" theme="solarizedlight">[[ser]]</pb-code-highlight></pb:template>
            </model>
            <model predicate="not(@source = ('#NONE', '#UND'))" behaviour="alternate" cssClass="bibl-link">
                <param name="default" value="'bibliography'"/>
                <param name="alternate" value="let $key := substring-after(@source, '#') return root($parameters?root)//id($key)/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="specGrp" mode="add">
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="eg" mode="add">
                    <model behaviour="block" cssClass="example">
            <param name="content" value="node()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-code-highlight theme="solarizedlight">
  <template>[[content]]</template>
</pb-code-highlight></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="mentioned" mode="add">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="desc" mode="change">
                    <model predicate="@xml:lang != $parameters?lng" behaviour="omit"/>
                    <model behaviour="inline"/>
                </elementSpec>
            <elementSpec ident="div" mode="change">
                    <modelSequence predicate="$parameters?mode='guide'">
            <model predicate="parent::div" behaviour="pass-through">
                <param name="content" value="head"/>
            </model>
            <model predicate="div" behaviour="list">
                <param name="content" value="div"/>
            </model>
        </modelSequence>
                    <model predicate="$parameters?mode='toc' and ancestor::body" behaviour="block">
            <param name="label" value="head/string()"/>
            <param name="id" value="@xml:id"/>
            <param name="number" value="let $div := $get(.)   return (ec:heading-number($div), ' ')"/>
            <pb:template xmlns="" xml:space="preserve"><a href="p5.xml?id=[[id]]">[[number]][[label]]</a></pb:template>
        </model>
                    <model predicate="$parameters?mode='toc'" behaviour="block">
            <param name="label" value="head/string()"/>
            <param name="id" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><a href="p5.xml?id=[[id]]">[[label]]</a></pb:template>
        </model>
                    <modelSequence predicate="$parameters?mode='breadcrumbs'">
            <model behaviour="pass-through">
                <param name="content" value="$get(.)/(ancestor::front | ancestor::back)"/>
            </model>
            <model predicate="$get(.)/ancestor::div/head" behaviour="inline" cssClass="breadcrumb">
                <param name="content" value="$get(.)/ancestor::div/head"/>
            </model>
            <model behaviour="inline" cssClass="breadcrumb">
                <param name="content" value="let $div := $get(.)   return (ec:heading-number($div), ' ', ./head/node())"/>
            </model>
        </modelSequence>
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
            <elementSpec ident="elementSpec" mode="add">
                    <model predicate="$parameters?mode='ref'" behaviour="passthrough">
            <param name="ident" value="@ident"/>
            <param name="gloss" value="gloss[@xml:lang=$parameters?lng]"/>
            <param name="lng" value="'en'"/>
            <param name="desc" value="(' ', desc[@xml:lang=$parameters?lng])"/>
            <param name="heading" value="@ident"/>
            <param name="content" value="let $code := content return &lt;code&gt; {replace(serialize($code, map {&#34;indent&#34;: true()}), ' xmlns=&#34;http://www.tei-c.org/ns/1.0&#34;', '')}&lt;/code&gt;"/>
            <param name="containedBy" value="classes"/>
            <param name="members" value="let $members:= for $i in classes/memberOf[not(starts-with(@key, 'att'))] let $n := $i/@key order by $n return ($i, ' ') return &lt;ref-cell&gt;{$members}&lt;/ref-cell&gt;"/>
            <param name="module" value="@module"/>
            <param name="attributes" value="attList"/>
            <param name="example" value="(exemplum[@xml:lang=$parameters?lng], exemplum)[1]"/>
            <param name="attClass" value="for $i in classes/memberOf[starts-with(@key, 'att')]   let $n := $i/@key    let $classSpec := root($parameters?root)//classSpec[@ident=$n]  let $exp := ec:expand-attributes($classSpec)  return &lt;item&gt;{$exp}&lt;/item&gt;"/>
            <param name="moduleName" value="let $module := @module  let $spec := root($parameters?root)//moduleSpec[@ident=$module] return $spec/desc"/>
            <param name="remarks" value="(remarks[@xml:lang=$parameters?lng], remarks)[1]"/>
            <param name="mayContain" value="content"/>
            <param name="schematron" value="constraintSpec"/>
            <param name="links" value="if (listRef/ptr) then (' [', for $i in listRef/ptr return ($i, ' '), ']') else ()"/>
            <pb:template xmlns="" xml:space="preserve"><div class="element-spec">
  <h3 class="ident">[[ident]]</h3>
  <table>
    <tr><td colspan="2"><span class="ident bracket">[[ident]]</span>[[gloss]] [[desc]] [[links]]</td></tr>
    <tr><td>Module</td><td>[[module]] — [[moduleName]]</td></tr>
    <tr><td>Attributes</td><td><dl class="att-class">[[attClass]]</dl>[[attributes]]</td></tr>
    [[members]]
    <tr><td>Contained by</td><td>[[containedBy]]</td></tr>
    <tr><td>May contain</td><td>[[mayContain]]</td></tr>
    [[remarks]]
    <tr><td>Example</td><td>[[example]]</td></tr>
    [[schematron]]
    <tr><td>Content model</td><td>[[content]]</td></tr>
    <!--
    <tr><td>Schema declaration</td><td>TODO</td></tr>
-->
</table>
</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="content" mode="add">
                    <model predicate="$parameters?mode='source'" behaviour="block">
            <param name="content" value="replace(serialize(., map {&#34;indent&#34;: true()}), ' xmlns=&#34;http://www.tei-c.org/ns/1.0&#34;', '')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-code-highlight language="xml" theme="solarizedlight">[[content]]</pb-code-highlight></pb:template>
        </model>
                    <model behaviour="may-contain"/>
                </elementSpec>
                <elementSpec ident="memberOf" mode="add">
                    <model predicate="$parameters?mode='ref'" behaviour="link">
            <param name="uri" value="'ref/'||@key"/>
            <param name="content" value="@key"/>
        </model>
                </elementSpec>
                <elementSpec ident="attDef" mode="add">
                    <model predicate="$parameters?mode='ref'" behaviour="passthrough">
            <desc>display in reference pages</desc>
            <param name="name" value="@ident"/>
            <param name="desc" value="desc[@xml:lang=$parameters?lng]"/>
            <param name="usage" value="@usage"/>
            <param name="datatype" value="datatype/dataRef/@key"/>
            <param name="exemplum" value="(exemplum[@xml:lang=$parameters?lng], exemplum)[1]"/>
            <pb:template xmlns="" xml:space="preserve"><dl>
  <dt>@[[name]]</dt>
  <dd>[[desc]]
    <dl>
  		<dt>Usage</dt> <dd>[[usage]]</dd>
  		<dt>Datatype</dt> <dd>[[datatype]]</dd>
    </dl>
  </dd>
  [[exemplum]]
</dl></pb:template>
        </model>
                    <model behaviour="block" cssClass="attribute">
            <desc>display in the Guidelines text</desc>
            <param name="name" value="@ident"/>
            <param name="desc" value="desc[@xml:lang=$parameters?lng]"/>
            <pb:template xmlns="" xml:space="preserve"><dl><dt>@[[name]]</dt> <dd>[[desc]]</dd></dl></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="ident" mode="add">
                    <model predicate="@type=('class', 'module', 'macro', 'schema')" behaviour="inline">
            <param name="name" value="."/>
            <pb:template xmlns="" xml:space="preserve"><a href="ref/[[name]]">[[name]]</a></pb:template>
        </model>
                    <model predicate="@type" behaviour="inline">
            <desc>other types: ge, file, datatype, pe, ns, frag, rng</desc>
        </model>
                    <model behaviour="inline" cssClass="ident"/>
                </elementSpec>
            <elementSpec ident="teiHeader" mode="change">
                    <model predicate="$parameters?mode='title'" behaviour="block" cssClass="title">
            <desc>display as document title for Guidelines reading view</desc>
            <param name="title" value="string-join(root(.)//text/front//docTitle//title)"/>
            <param name="version" value=".//editionStmt/edition"/>
            <pb:template xmlns="" xml:space="preserve"><div class="title">
  <h2 class="title">[[title]]</h2>
  [[version]]
</div></pb:template>
        </model>
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>
                <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="edition" mode="change">
                    <model behaviour="inline"/>
                </elementSpec>
            <elementSpec ident="back" mode="change">
                    <model predicate="$parameters?mode='breadcrumbs'" behaviour="inline" cssClass="breadcrumb">
            <param name="content" value="'Back matter'"/>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="front" mode="change">
                    <model predicate="$parameters?mode='breadcrumbs'" behaviour="inline" cssClass="breadcrumb">
            <param name="content" value="'Front matter'"/>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="table" mode="change">
                    <model behaviour="table"/>
                </elementSpec>
                <elementSpec ident="*">
                    <model predicate="$parameters?mode='toc'" behaviour="omit"/>
                </elementSpec>
            <elementSpec ident="titlePage" mode="change">
                    <model predicate="$parameters?mode='toc'" behaviour="omit"/>
                    <model behaviour="block" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            text-align: center;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="classSpec" mode="add">
                    <model predicate="$parameters?mode='ref' and starts-with(@ident, 'model.')" behaviour="inline">
            <param name="ident" value="@ident"/>
            <param name="gloss" value="gloss[@xml:lang=$parameters?lng]"/>
            <param name="desc" value="(' ', desc[@xml:lang=$parameters?lng])"/>
            <param name="links" value="if (listRef/ptr) then (' [', listRef/ptr, ']') else ()"/>
            <param name="module" value="@module"/>
            <param name="lng" value="'en'"/>
            <param name="moduleName" value="let $module := @module   let $spec := root(.)//moduleSpec[@ident=$module]  return $spec/desc"/>
            <param name="members" value="ec:expand-members(.)"/>
            <param name="memberOf" value="ec:expand-usedBy(.)"/>
            <param name="remarks" value="(remarks[@xml:lang=$parameters?lng], remarks)[1]"/>
            <pb:template xmlns="" xml:space="preserve"><div class="element-spec">
  <h3>[[ident]]</h3>
  <table>
    <tr><td colspan="2">[[gloss]] [[desc]] [[links]]</td></tr>
    <tr><td>Module</td><td>[[module]] — [[moduleName]]</td></tr>
    [[memberOf]]
    <tr><td>Members</td><td>[[members]]</td></tr>
    [[remarks]]
</table>
</div></pb:template>
        </model>
                    <model predicate="$parameters?mode='ref' and starts-with(@ident, 'att.')" behaviour="passthrough">
            <param name="gloss" value="gloss[@xml:lang=$parameters?lng]"/>
            <param name="desc" value="(' ', desc[@xml:lang=$parameters?lng])"/>
            <param name="links" value="if (listRef/ptr) then (' [', listRef/ptr, ']') else ()"/>
            <param name="module" value="@module"/>
            <param name="members" value="ec:expand-members(.)"/>
            <param name="attClass" value="for $i in classes/memberOf[starts-with(@key, 'att')]   let $n := $i/@key    let $classSpec := root($parameters?root)//classSpec[@ident=$n]  let $exp := ec:expand-attributes($classSpec)  return &lt;item&gt;{$exp}&lt;/item&gt;"/>
            <param name="attributes" value="attList"/>
            <param name="ident" value="@ident"/>
            <param name="lng" value="'en'"/>
            <param name="moduleName" value="let $module := @module   let $spec := root(.)//moduleSpec[@ident=$module]  return $spec/desc"/>
            <pb:template xmlns="" xml:space="preserve"><div class="element-spec">
  <h3>[[ident]]</h3>
  <table>
    <tr><td colspan="2">[[gloss]] [[desc]] [[links]]</td></tr>
    <tr><td>Module</td><td>[[module]] — [[moduleName]]</td></tr>
    <tr><td>Members</td><td>[[members]]</td></tr>
    <tr><td>Attributes</td><td><dl class="att-class">[[attClass]]</dl>[[attributes]]</td></tr>   
</table>
</div></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="classes" mode="add">
                    <model behaviour="contained-by"/>
                </elementSpec>
            <elementSpec ident="remarks" mode="add">
                    <model predicate="$parameters?mode='ref'" behaviour="passthrough">
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><tr><td>Note</td><td>[[content]]</td></tr></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="attList" mode="add"/>
                <elementSpec ident="code" mode="change">
                    <model predicate="$parameters?mode='ref'" behaviour="passthrough">
            <param name="content" value="./node()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-code-highlight language="xml" theme="solarizedlight">[[content]]</pb-code-highlight></pb:template>
            <outputRendition xml:space="preserve">
            font-family:monospace;
            </outputRendition>
        </model>
                    <model behaviour="inline" cssClass="code">
            <outputRendition xml:space="preserve">
            font-family:monospace;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="constraint" mode="add">
                    <model behaviour="passthrough">
            <param name="constraint" value="replace(serialize(node(), map {&#34;indent&#34;: true()}), ' xmlns=&#34;http://www.tei-c.org/ns/1.0&#34;', '')"/>
            <pb:template xmlns="" xml:space="preserve"><pb-code-highlight language="xml" theme="solarizedlight">[[constraint]]</pb-code-highlight></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="constraintSpec" mode="add">
                    <model predicate="@scheme='schematron'" behaviour="passthrough">
            <param name="constraint" value="."/>
            <pb:template xmlns="" xml:space="preserve"><tr>
  <td>Schematron</td>
  <td>[[constraint]]</td>
</tr></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="ref-cell" mode="add">
                    <model predicate="@type='used-by' and count(child::*)" behaviour="inline">
            <param name="members" value="."/>
            <pb:template xmlns="" xml:space="preserve"><tr><td>Used by</td><td>[[members]]</td></tr></pb:template>
        </model>
                    <model predicate="count(child::*)" behaviour="passthrough">
            <param name="members" value="."/>
            <pb:template xmlns="" xml:space="preserve"><tr><td>Member of</td><td>[[members]]</td></tr></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="graphic" mode="change">
                    <model behaviour="graphic">
            <param name="url" value="'https://tei-c.org/release/doc/tei-p5-doc/en/html/' || @url"/>
            <param name="width" value="@width"/>
            <param name="height" value="@height"/>
            <param name="scale" value="@scale"/>
            <param name="title" value="desc"/>
        </model>
                </elementSpec>
            <elementSpec ident="list" mode="change">
                    <model predicate="@rend='numbered'" behaviour="list">
            <param name="type" value="'ordered'"/>
        </model>
                    <model predicate="@rendition" behaviour="list" useSourceRendition="true">
            <param name="content" value="item"/>
        </model>
                    <model predicate="not(@rendition)" behaviour="list">
            <param name="content" value="item"/>
        </model>
                </elementSpec>
                <elementSpec ident="term" mode="add">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="macroSpec" mode="add">
                    <model predicate="$parameters?mode='ref'" behaviour="passthrough">
            <param name="ident" value="@ident"/>
            <param name="gloss" value="gloss[@xml:lang=$parameters?lng]"/>
            <param name="desc" value="(' ', desc[@xml:lang=$parameters?lng])"/>
            <param name="links" value="if (listRef/ptr) then (' [', listRef/ptr, ']') else ()"/>
            <param name="module" value="@module"/>
            <param name="moduleName" value="let $module := @module   let $spec := root(.)//moduleSpec[@ident=$module]  return $spec/desc"/>
            <param name="remarks" value="(remarks[@xml:lang=$parameters?lng], remarks)[1]"/>
            <param name="usedBy" value="ec:expand-macro-usedBy(.)"/>
            <param name="content" value="let $code := content return &lt;code&gt; {replace(serialize($code, map {&#34;indent&#34;: true()}), ' xmlns=&#34;http://www.tei-c.org/ns/1.0&#34;', '')}&lt;/code&gt;"/>
            <pb:template xmlns="" xml:space="preserve"><div class="element-spec">
  <h3>[[ident]]</h3>
  <table>
    <tr><td colspan="2"><span class="ident">[[ident]]</span> [[gloss]] [[desc]] [[links]]</td></tr>
    <tr><td>Module</td><td>[[module]] — [[moduleName]]</td></tr>
    [[usedBy]]
    <tr><td>Content model</td><td>[[content]]</td></tr>
    [[remarks]]
    <!-- Declaration -->
</table>
</div></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="gloss" mode="add">
                    <model predicate="$parameters?mode='ref'" behaviour="inline" cssClass="gloss"/>
                    <model behaviour="inline"/>
                </elementSpec>
            <elementSpec ident="divGen" mode="add">
                    <model behaviour="catalog" cssClass="attcat"/>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>